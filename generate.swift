/// Generate the code for up to N dependencies.
import Foundation

let dependencyCount = 64

var structs = [String]()
var registrations = [String]()

let registrationTemplate = """
    public func register<U, {DEPS}>(
        _ value: @escaping (Dependencies{COUNT}<Members, {DEPS}>) -> U,
        for keypath: KeyPath<Members, U>,
        dependencies {KEYPATHS})
    {
        let deps: Dependencies{COUNT}<Members, {DEPS}> = Dependencies{COUNT}(storage)
        storage.initializers[keypath] = {
            value(deps)
        }
    }
"""

let structTemplate = """
@dynamicMemberLookup
public struct Dependencies{COUNT}<Members, {DEPS}> {
    private let storage: Belum<Members>.Storage

{FUNCTIONS}

    fileprivate init(_ storage: Belum<Members>.Storage) { self.storage = storage }
}
"""

// count = 2
// deps = "C1, C2"
// functions = .. beow

let structFunctionTemplate = """
    public subscript(dynamicMember keyPath: WritableKeyPath<Members, {DEP}?>) -> {DEP}? {
        storage[memberKeyPath: keyPath]
    }
"""
// dep = C1 / dep = C2


for n in 1..<dependencyCount {
    // registration
    let deps = (1...n).map { "D\($0)" }.joined(separator: ", ")
    let count = "\(n)"
    let keypaths = (1...n).map {
        let out = "d\($0): KeyPath<Members, D\($0)>"
        if $0 == 1 {
            return out
        } else {
            return "_ \(out)"
        }
    }.joined(separator: ", ")

    registrations.append(
        registrationTemplate
        .replacingOccurrences(of: "{DEPS}", with: deps)
        .replacingOccurrences(of: "{COUNT}", with: count)
        .replacingOccurrences(of: "{KEYPATHS}", with: keypaths)
    )

    // struct
    var functionsList = [String]()
    for n in 1...n {
        let dep = "C\(n)"
        functionsList.append(
            structFunctionTemplate
                .replacingOccurrences(of: "{DEP}", with: dep)
        )
    }
    let functions = functionsList.joined(separator: "\n")
    let structDeps = (1...n).map { "C\($0)" }.joined(separator: ", ")
    structs.append(
        structTemplate
        .replacingOccurrences(of: "{DEPS}", with: structDeps)
        .replacingOccurrences(of: "{COUNT}", with: count)
        .replacingOccurrences(of: "{FUNCTIONS}", with: functions)
    )
}

print("// Auto-Generated by generate.swift")
print("// Do not modify")
print("// ")

print("extension Belum.Registrar {")
for r in registrations {
    print(r)
}
print("}")
for r in structs {
    print(r)
}
